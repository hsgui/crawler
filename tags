!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AF_LOCAL	net.h	39;"	d
BUFLEN	parse.h	5;"	d
EBUFLEN	parse.h	7;"	d
END_OF_HTML	crawler.h	24;"	d
F_CONNECTING	crawler.h	43;"	d
F_DONE	crawler.h	45;"	d
F_JOINED	crawler.h	46;"	d
F_READING	crawler.h	44;"	d
GET_CMD	crawler.h	23;"	d
HIREDIS_MAJOR	hiredis.h	38;"	d
HIREDIS_MINOR	hiredis.h	39;"	d
HIREDIS_PATCH	hiredis.h	40;"	d
HOST	crawler.h	21;"	d
HOST_LENGTH	crawler.h	30;"	d
MAXFILES	crawler.h	27;"	d
MAXLINE	crawler.h	26;"	d
MAX_URL_LENGTH	parse.h	6;"	d
NEXT_LINE	crawler.h	22;"	d
OVECCOUNT	parse.h	4;"	d
REDIS_BLOCK	hiredis.h	57;"	d
REDIS_CONNECTED	hiredis.h	61;"	d
REDIS_DISCONNECTING	hiredis.h	67;"	d
REDIS_ERR	hiredis.h	42;"	d
REDIS_ERR_EOF	hiredis.h	50;"	d
REDIS_ERR_IO	hiredis.h	49;"	d
REDIS_ERR_OOM	hiredis.h	52;"	d
REDIS_ERR_OTHER	hiredis.h	53;"	d
REDIS_ERR_PROTOCOL	hiredis.h	51;"	d
REDIS_FREEING	hiredis.h	71;"	d
REDIS_IN_CALLBACK	hiredis.h	74;"	d
REDIS_OK	hiredis.h	43;"	d
REDIS_REPLY_ARRAY	hiredis.h	80;"	d
REDIS_REPLY_ERROR	hiredis.h	84;"	d
REDIS_REPLY_INTEGER	hiredis.h	81;"	d
REDIS_REPLY_NIL	hiredis.h	82;"	d
REDIS_REPLY_STATUS	hiredis.h	83;"	d
REDIS_REPLY_STRING	hiredis.h	79;"	d
REDIS_SUBSCRIBED	hiredis.h	77;"	d
RIO_BUFSIZE	rio.h	9;"	d
SERV	crawler.h	28;"	d
Tcp_connect	tcpConnect.c	/^int Tcp_connect(const char *host, const char *serv)$/;"	f
URL_LENGTH	crawler.h	29;"	d
_BSD_SOURCE	fmacros.h	5;"	d
_CRAWLER_H	crawler.h	2;"	d
_POSIX_C_SOURCE	fmacros.h	9;"	d
_QUEUE_H_	queue.h	2;"	d
_RIO_H_	rio.h	2;"	d
_XOPEN_SOURCE	fmacros.h	11;"	d
_XOPEN_SOURCE	fmacros.h	13;"	d
__HIREDIS_FMACRO_H	fmacros.h	2;"	d
__HIREDIS_H	hiredis.h	33;"	d
__NET_H	net.h	34;"	d
__SDS_H	sds.h	32;"	d
__failed_tests	sds.c	/^int __failed_tests = 0;$/;"	v
__redisAppendCommand	hiredis.c	/^int __redisAppendCommand(redisContext *c, char *cmd, size_t len) {$/;"	f
__redisBlockForReply	hiredis.c	/^static void *__redisBlockForReply(redisContext *c) {$/;"	f	file:
__redisReaderSetError	hiredis.c	/^static void __redisReaderSetError(redisReader *r, int type, const char *str) {$/;"	f	file:
__redisReaderSetErrorOOM	hiredis.c	/^static void __redisReaderSetErrorOOM(redisReader *r) {$/;"	f	file:
__redisReaderSetErrorProtocolByte	hiredis.c	/^static void __redisReaderSetErrorProtocolByte(redisReader *r, char byte) {$/;"	f	file:
__redisSetError	hiredis.c	/^void __redisSetError(redisContext *c, int type, const char *str) {$/;"	f
__redisSetErrorFromErrno	net.c	/^static void __redisSetErrorFromErrno(redisContext *c, int type, const char *prefix) {$/;"	f	file:
__test_num	sds.c	/^int __test_num = 0;$/;"	v
buf	hiredis.h	/^    char *buf; \/* Read buffer *\/$/;"	m	struct:redisReader
buf	sds.h	/^    char buf[];$/;"	m	struct:sdshdr
bulklen	hiredis.c	/^static size_t bulklen(size_t len) {$/;"	f	file:
chrtos	hiredis.c	/^static size_t chrtos(char *buf, size_t size, char byte) {$/;"	f	file:
connectRedis	alpha.c	/^static redisContext *connectRedis(char* host, int port) {$/;"	f	file:
connectRedis	beta.c	/^static redisContext *connectRedis(char* host, int port) {$/;"	f	file:
context	crawler.h	/^static struct redisContext *context;$/;"	v	typeref:struct:redisContext
createArray	hiredis.h	/^    void *(*createArray)(const redisReadTask*, int);$/;"	m	struct:redisReplyObjectFunctions
createArrayObject	hiredis.c	/^static void *createArrayObject(const redisReadTask *task, int elements) {$/;"	f	file:
createInteger	hiredis.h	/^    void *(*createInteger)(const redisReadTask*, long long);$/;"	m	struct:redisReplyObjectFunctions
createIntegerObject	hiredis.c	/^static void *createIntegerObject(const redisReadTask *task, long long value) {$/;"	f	file:
createNil	hiredis.h	/^    void *(*createNil)(const redisReadTask*);$/;"	m	struct:redisReplyObjectFunctions
createNilObject	hiredis.c	/^static void *createNilObject(const redisReadTask *task) {$/;"	f	file:
createReplyObject	hiredis.c	/^static redisReply *createReplyObject(int type) {$/;"	f	file:
createString	hiredis.h	/^    void *(*createString)(const redisReadTask*, char*, size_t);$/;"	m	struct:redisReplyObjectFunctions
createStringObject	hiredis.c	/^static void *createStringObject(const redisReadTask *task, char *str, size_t len) {$/;"	f	file:
defaultFunctions	hiredis.c	/^static redisReplyObjectFunctions defaultFunctions = {$/;"	v	file:
disconnectRedis	alpha.c	/^static void disconnectRedis(redisContext *c) {$/;"	f	file:
disconnectRedis	beta.c	/^static void disconnectRedis(redisContext *c) {$/;"	f	file:
do_get_read	alpha.c	/^void *do_get_read(void *vptr)$/;"	f
do_get_read	beta.c	/^void *do_get_read(void *vptr)$/;"	f
do_get_read	notbuild.c	/^void *do_get_read(void *vptr)$/;"	f
element	hiredis.h	/^    struct redisReply **element; \/* elements vector for REDIS_REPLY_ARRAY *\/$/;"	m	struct:redisReply	typeref:struct:redisReply::redisReply
elements	hiredis.h	/^    int elements; \/* number of elements in multibulk container *\/$/;"	m	struct:redisReadTask
elements	hiredis.h	/^    size_t elements; \/* number of elements, for REDIS_REPLY_ARRAY *\/$/;"	m	struct:redisReply
err	hiredis.h	/^    int err; \/* Error flags, 0 when there is no error *\/$/;"	m	struct:redisContext
err	hiredis.h	/^    int err; \/* Error flags, 0 when there is no error *\/$/;"	m	struct:redisReader
errstr	hiredis.h	/^    char errstr[128]; \/* String representation of error when applicable *\/$/;"	m	struct:redisContext
errstr	hiredis.h	/^    char errstr[128]; \/* String representation of error when applicable *\/$/;"	m	struct:redisReader
f_fd	crawler.h	/^	int f_fd;$/;"	m	struct:file
f_flags	crawler.h	/^	int f_flags;$/;"	m	struct:file
f_host	crawler.h	/^	char f_host[HOST_LENGTH];$/;"	m	struct:file
f_name	crawler.h	/^	char f_name[URL_LENGTH];	$/;"	m	struct:file
f_tid	crawler.h	/^	pthread_t f_tid;$/;"	m	struct:file
fd	hiredis.h	/^    int fd;$/;"	m	struct:redisContext
file	crawler.h	/^struct file{$/;"	s
file	crawler.h	/^}file[MAXFILES];$/;"	v	typeref:struct:file
flags	hiredis.h	/^    int flags;$/;"	m	struct:redisContext
fn	hiredis.h	/^    redisReplyObjectFunctions *fn;$/;"	m	struct:redisReader
free	sds.h	/^    int free;$/;"	m	struct:sdshdr
freeObject	hiredis.h	/^    void (*freeObject)(void*);$/;"	m	struct:redisReplyObjectFunctions
freeReplyObject	hiredis.c	/^void freeReplyObject(void *reply) {$/;"	f
head	queue.h	/^	listNode *head;$/;"	m	struct:list
home_page	alpha.c	/^void home_page(char *host, char *fname)$/;"	f
home_page	beta.c	/^void home_page(char *host, char *fname)$/;"	f
home_page	notbuild.c	/^void home_page(char *host, char *fname)$/;"	f
idx	hiredis.h	/^    int idx; \/* index in parent (array) object *\/$/;"	m	struct:redisReadTask
integer	hiredis.h	/^    long long integer; \/* The integer when type is REDIS_REPLY_INTEGER *\/$/;"	m	struct:redisReply
intlen	hiredis.c	/^static int intlen(int i) {$/;"	f	file:
isContainHost	parse.h	/^int isContainHost(char *url)$/;"	f
len	hiredis.h	/^    int len; \/* Length of string *\/$/;"	m	struct:redisReply
len	hiredis.h	/^    size_t len; \/* Buffer length *\/$/;"	m	struct:redisReader
len	queue.h	/^	unsigned int len;$/;"	m	struct:list
len	sds.h	/^    int len;$/;"	m	struct:sdshdr
list	queue.h	/^typedef struct list{$/;"	s
list	queue.h	/^}list;$/;"	t	typeref:struct:list
listAddNodeTail	queue.h	/^list *listAddNodeTail(list *list, char *value)$/;"	f
listCreate	queue.h	/^list *listCreate(void)$/;"	f
listDelNodeHead	queue.h	/^void listDelNodeHead(list *list)$/;"	f
listFirst	queue.h	24;"	d
listLast	queue.h	25;"	d
listLength	queue.h	23;"	d
listNode	queue.h	/^typedef struct listNode{$/;"	s
listNode	queue.h	/^}listNode;$/;"	t	typeref:struct:listNode
listRelease	queue.h	/^void listRelease(list *list)$/;"	f
localhost	alpha.c	/^char localhost[]="127.0.0.1";$/;"	v
localhost	beta.c	/^char localhost[]="127.0.0.1";$/;"	v
main	alpha.c	/^int main(int argc, char **argv)$/;"	f
main	beta.c	/^int main(int argc, char **argv)$/;"	f
main	notbuild.c	/^int main(int argc, char **argv)$/;"	f
main	sds.c	/^int main(void) {$/;"	f
moveToNextTask	hiredis.c	/^static void moveToNextTask(redisReader *r) {$/;"	f	file:
nconn	crawler.h	/^int nconn, nfiles, nlefttoconn, nlefttoread;$/;"	v
ndone	crawler.h	/^int ndone;$/;"	v
ndone_cond	crawler.h	/^static pthread_cond_t ndone_cond = PTHREAD_COND_INITIALIZER;$/;"	v
ndone_mutex	crawler.h	/^static pthread_mutex_t ndone_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
next	queue.h	/^	struct listNode *next;$/;"	m	struct:listNode	typeref:struct:listNode::listNode
nfiles	crawler.h	/^int nconn, nfiles, nlefttoconn, nlefttoread;$/;"	v
nlefttoconn	crawler.h	/^int nconn, nfiles, nlefttoconn, nlefttoread;$/;"	v
nlefttoread	crawler.h	/^int nconn, nfiles, nlefttoconn, nlefttoread;$/;"	v
obj	hiredis.h	/^    void *obj; \/* holds user-generated value for a read task *\/$/;"	m	struct:redisReadTask
obuf	hiredis.h	/^    char *obuf; \/* Write buffer *\/$/;"	m	struct:redisContext
parent	hiredis.h	/^    struct redisReadTask *parent; \/* parent task *\/$/;"	m	struct:redisReadTask	typeref:struct:redisReadTask::redisReadTask
parseUrl	parse.h	/^int parseUrl(char* content, char* host)$/;"	f
pattern	parse.h	/^const char pattern[] = "<a\\\\s[^>]*?href\\\\s*=\\\\s*[\\"']?([^\\"'\\\\s>]*)[^>]*>";$/;"	v
port	alpha.c	/^int port=6379;$/;"	v
port	beta.c	/^int port=6379;$/;"	v
pos	hiredis.h	/^    size_t pos; \/* Buffer cursor *\/$/;"	m	struct:redisReader
printList	queue.h	/^void printList(list *list)$/;"	f
privdata	hiredis.h	/^    void *privdata; \/* user-settable arbitrary field *\/$/;"	m	struct:redisReadTask
privdata	hiredis.h	/^    void *privdata;$/;"	m	struct:redisReader
processBulkItem	hiredis.c	/^static int processBulkItem(redisReader *r) {$/;"	f	file:
processItem	hiredis.c	/^static int processItem(redisReader *r) {$/;"	f	file:
processLineItem	hiredis.c	/^static int processLineItem(redisReader *r) {$/;"	f	file:
processMultiBulkItem	hiredis.c	/^static int processMultiBulkItem(redisReader *r) {$/;"	f	file:
queue	queue.h	/^static list *queue;$/;"	v
queue_mutex	queue.h	/^pthread_mutex_t queue_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
readBytes	hiredis.c	/^static char *readBytes(redisReader *r, unsigned int bytes) {$/;"	f	file:
readLine	hiredis.c	/^static char *readLine(redisReader *r, int *_len) {$/;"	f	file:
readLongLong	hiredis.c	/^static long long readLongLong(char *s) {$/;"	f	file:
reader	hiredis.h	/^    redisReader *reader; \/* Protocol reader *\/$/;"	m	struct:redisContext
redisAppendCommand	hiredis.c	/^int redisAppendCommand(redisContext *c, const char *format, ...) {$/;"	f
redisAppendCommandArgv	hiredis.c	/^int redisAppendCommandArgv(redisContext *c, int argc, const char **argv, const size_t *argvlen) {$/;"	f
redisBufferRead	hiredis.c	/^int redisBufferRead(redisContext *c) {$/;"	f
redisBufferWrite	hiredis.c	/^int redisBufferWrite(redisContext *c, int *done) {$/;"	f
redisCommand	hiredis.c	/^void *redisCommand(redisContext *c, const char *format, ...) {$/;"	f
redisCommandArgv	hiredis.c	/^void *redisCommandArgv(redisContext *c, int argc, const char **argv, const size_t *argvlen) {$/;"	f
redisConnect	hiredis.c	/^redisContext *redisConnect(const char *ip, int port) {$/;"	f
redisConnectNonBlock	hiredis.c	/^redisContext *redisConnectNonBlock(const char *ip, int port) {$/;"	f
redisConnectUnix	hiredis.c	/^redisContext *redisConnectUnix(const char *path) {$/;"	f
redisConnectUnixNonBlock	hiredis.c	/^redisContext *redisConnectUnixNonBlock(const char *path) {$/;"	f
redisConnectUnixWithTimeout	hiredis.c	/^redisContext *redisConnectUnixWithTimeout(const char *path, struct timeval tv) {$/;"	f
redisConnectWithTimeout	hiredis.c	/^redisContext *redisConnectWithTimeout(const char *ip, int port, struct timeval tv) {$/;"	f
redisContext	hiredis.h	/^typedef struct redisContext {$/;"	s
redisContext	hiredis.h	/^} redisContext;$/;"	t	typeref:struct:redisContext
redisContextConnectTcp	net.c	/^int redisContextConnectTcp(redisContext *c, const char *addr, int port, struct timeval *timeout) {$/;"	f
redisContextConnectUnix	net.c	/^int redisContextConnectUnix(redisContext *c, const char *path, struct timeval *timeout) {$/;"	f
redisContextInit	hiredis.c	/^static redisContext *redisContextInit(void) {$/;"	f	file:
redisContextSetTimeout	net.c	/^int redisContextSetTimeout(redisContext *c, struct timeval tv) {$/;"	f
redisContextWaitReady	net.c	/^static int redisContextWaitReady(redisContext *c, int fd, const struct timeval *timeout) {$/;"	f	file:
redisCreateSocket	net.c	/^static int redisCreateSocket(redisContext *c, int type) {$/;"	f	file:
redisFormatCommand	hiredis.c	/^int redisFormatCommand(char **target, const char *format, ...) {$/;"	f
redisFormatCommandArgv	hiredis.c	/^int redisFormatCommandArgv(char **target, int argc, const char **argv, const size_t *argvlen) {$/;"	f
redisFree	hiredis.c	/^void redisFree(redisContext *c) {$/;"	f
redisGetReply	hiredis.c	/^int redisGetReply(redisContext *c, void **reply) {$/;"	f
redisGetReplyFromReader	hiredis.c	/^int redisGetReplyFromReader(redisContext *c, void **reply) {$/;"	f
redisReadTask	hiredis.h	/^typedef struct redisReadTask {$/;"	s
redisReadTask	hiredis.h	/^} redisReadTask;$/;"	t	typeref:struct:redisReadTask
redisReader	hiredis.h	/^typedef struct redisReader {$/;"	s
redisReader	hiredis.h	/^} redisReader;$/;"	t	typeref:struct:redisReader
redisReaderCreate	hiredis.c	/^redisReader *redisReaderCreate(void) {$/;"	f
redisReaderFeed	hiredis.c	/^int redisReaderFeed(redisReader *r, const char *buf, size_t len) {$/;"	f
redisReaderFree	hiredis.c	/^void redisReaderFree(redisReader *r) {$/;"	f
redisReaderGetReply	hiredis.c	/^int redisReaderGetReply(redisReader *r, void **reply) {$/;"	f
redisReply	hiredis.h	/^typedef struct redisReply {$/;"	s
redisReply	hiredis.h	/^} redisReply;$/;"	t	typeref:struct:redisReply
redisReplyObjectFunctions	hiredis.h	/^typedef struct redisReplyObjectFunctions {$/;"	s
redisReplyObjectFunctions	hiredis.h	/^} redisReplyObjectFunctions;$/;"	t	typeref:struct:redisReplyObjectFunctions
redisReplyReaderCreate	hiredis.h	141;"	d
redisReplyReaderFeed	hiredis.h	143;"	d
redisReplyReaderFree	hiredis.h	142;"	d
redisReplyReaderGetError	hiredis.h	147;"	d
redisReplyReaderGetObject	hiredis.h	146;"	d
redisReplyReaderGetReply	hiredis.h	144;"	d
redisReplyReaderSetPrivdata	hiredis.h	145;"	d
redisSetBlocking	net.c	/^static int redisSetBlocking(redisContext *c, int fd, int blocking) {$/;"	f	file:
redisSetTcpNoDelay	net.c	/^static int redisSetTcpNoDelay(redisContext *c, int fd) {$/;"	f	file:
redisSetTimeout	hiredis.c	/^int redisSetTimeout(redisContext *c, struct timeval tv) {$/;"	f
redisvAppendCommand	hiredis.c	/^int redisvAppendCommand(redisContext *c, const char *format, va_list ap) {$/;"	f
redisvCommand	hiredis.c	/^void *redisvCommand(redisContext *c, const char *format, va_list ap) {$/;"	f
redisvFormatCommand	hiredis.c	/^int redisvFormatCommand(char **target, const char *format, va_list ap) {$/;"	f
reply	hiredis.h	/^    void *reply; \/* Temporary reply pointer *\/$/;"	m	struct:redisReader
ridx	hiredis.h	/^    int ridx; \/* Index of current read task *\/$/;"	m	struct:redisReader
rio_buf	rio.h	/^	char rio_buf[RIO_BUFSIZE];	\/*internal buffer *\/$/;"	m	struct:__anon1
rio_cnt	rio.h	/^	int rio_cnt;				\/*unread bytes in internal buf *\/$/;"	m	struct:__anon1
rio_fd	rio.h	/^	int rio_fd;					\/*descriptor for this internal buf*\/$/;"	m	struct:__anon1
rio_pbuf	rio.h	/^	char* rio_pbuf;				\/*next unread byte in internal buf*\/$/;"	m	struct:__anon1
rio_read	rio.h	/^ssize_t rio_read(rio_t *pr, char *usrbuf,size_t n)$/;"	f
rio_readinitb	rio.h	/^void rio_readinitb(rio_t *pr, int fd)$/;"	f
rio_readlineb	rio.h	/^ssize_t rio_readlineb(rio_t *pr, char *usrbuf, size_t maxlen)$/;"	f
rio_readn	rio.h	/^ssize_t rio_readn(int fd, char *usrbuf, size_t n)$/;"	f
rio_readnb	rio.h	/^ssize_t rio_readnb(rio_t *pr, char *usrbuf, size_t n)$/;"	f
rio_t	rio.h	/^}rio_t;$/;"	t	typeref:struct:__anon1
rio_writen	rio.h	/^ssize_t rio_writen(int fd, char* usrbuf, size_t n)$/;"	f
rstack	hiredis.h	/^    redisReadTask rstack[3];$/;"	m	struct:redisReader
sds	sds.h	/^typedef char *sds;$/;"	t
sdsMakeRoomFor	sds.c	/^static sds sdsMakeRoomFor(sds s, size_t addlen) {$/;"	f	file:
sdsOomAbort	sds.c	/^static void sdsOomAbort(void) {$/;"	f	file:
sdsavail	sds.h	/^static inline size_t sdsavail(const sds s) {$/;"	f
sdscat	sds.c	/^sds sdscat(sds s, const char *t) {$/;"	f
sdscatlen	sds.c	/^sds sdscatlen(sds s, const void *t, size_t len) {$/;"	f
sdscatprintf	sds.c	/^sds sdscatprintf(sds s, const char *fmt, ...) {$/;"	f
sdscatrepr	sds.c	/^sds sdscatrepr(sds s, char *p, size_t len) {$/;"	f
sdscatvprintf	sds.c	/^sds sdscatvprintf(sds s, const char *fmt, va_list ap) {$/;"	f
sdscmp	sds.c	/^int sdscmp(sds s1, sds s2) {$/;"	f
sdscpy	sds.c	/^sds sdscpy(sds s, char *t) {$/;"	f
sdscpylen	sds.c	/^sds sdscpylen(sds s, char *t, size_t len) {$/;"	f
sdsdup	sds.c	/^sds sdsdup(const sds s) {$/;"	f
sdsempty	sds.c	/^sds sdsempty(void) {$/;"	f
sdsfree	sds.c	/^void sdsfree(sds s) {$/;"	f
sdsfreesplitres	sds.c	/^void sdsfreesplitres(sds *tokens, int count) {$/;"	f
sdsfromlonglong	sds.c	/^sds sdsfromlonglong(long long value) {$/;"	f
sdsgrowzero	sds.c	/^sds sdsgrowzero(sds s, size_t len) {$/;"	f
sdshdr	sds.h	/^struct sdshdr {$/;"	s
sdslen	sds.h	/^static inline size_t sdslen(const sds s) {$/;"	f
sdsnew	sds.c	/^sds sdsnew(const char *init) {$/;"	f
sdsnewlen	sds.c	/^sds sdsnewlen(const void *init, size_t initlen) {$/;"	f
sdsrange	sds.c	/^sds sdsrange(sds s, int start, int end) {$/;"	f
sdssplitargs	sds.c	/^sds *sdssplitargs(char *line, int *argc) {$/;"	f
sdssplitlen	sds.c	/^sds *sdssplitlen(char *s, int len, char *sep, int seplen, int *count) {$/;"	f
sdstolower	sds.c	/^void sdstolower(sds s) {$/;"	f
sdstoupper	sds.c	/^void sdstoupper(sds s) {$/;"	f
sdstrim	sds.c	/^sds sdstrim(sds s, const char *cset) {$/;"	f
sdsupdatelen	sds.c	/^void sdsupdatelen(sds s) {$/;"	f
seekNewline	hiredis.c	/^static char *seekNewline(char *s, size_t len) {$/;"	f	file:
select_database	alpha.c	/^static struct redisContext *select_database(redisContext *c) {$/;"	f	file:
select_database	beta.c	/^static struct redisContext *select_database(redisContext *c) {$/;"	f	file:
setFileNameAndHost	parse.h	/^void setFileNameAndHost(char *url, char* name, char* host)$/;"	f
setName	crawler.h	/^static char setName[]="url";$/;"	v
str	hiredis.h	/^    char *str; \/* Used for both REDIS_REPLY_ERROR and REDIS_REPLY_STRING *\/$/;"	m	struct:redisReply
substr	parse.h	/^int substr(char *des, const char*str, unsigned start, unsigned end)$/;"	f
tail	queue.h	/^	listNode *tail;$/;"	m	struct:list
tcpConnect	tcpConnect.c	/^int tcpConnect(const char *host, const char *serv)$/;"	f
test_cond	sds.c	509;"	d	file:
test_report	sds.c	513;"	d	file:
type	hiredis.h	/^    int type; \/* REDIS_REPLY_* *\/$/;"	m	struct:redisReply
type	hiredis.h	/^    int type;$/;"	m	struct:redisReadTask
value	queue.h	/^	char *value;$/;"	m	struct:listNode
write_get_cmd	alpha.c	/^void write_get_cmd(struct file *fptr)$/;"	f
write_get_cmd	beta.c	/^void write_get_cmd(struct file *fptr)$/;"	f
write_get_cmd	notbuild.c	/^void write_get_cmd(struct file *fptr)$/;"	f
